#!/bin/ksh
displayDocumentation ()
{
/bin/echo "Change Log:"
/bin/echo "----------:"
/bin/echo "2015/12/17: allow for two space-separated values to be supplied"
/bin/echo "            in a \"bypass check\" field, the first value will be"
/bin/echo "            the routine name to be executed; the second, optional"
/bin/echo "            value will be an argument passed to the routine - the"
/bin/echo "            bypass check will determine whether a given parameter"
/bin/echo "            file line is processed or bypassed (new parameter field)"
/bin/echo ""
/bin/echo "Script nscaOldFiles information and usage:"
/bin/echo "------------------------------------------"
/bin/echo " 1. counts \"old\" files for Linux systems only"
/bin/echo " 2. communicates with Nagios via NSCA"
/bin/echo "    (NSCA daemon and configuration file must be present in the"
/bin/echo "     home directory of the executing user or in /usr/local/bin,"
/bin/echo "     else the script will exit)"
/bin/echo " 3. if the executing user's home directory contains a non-null file"
/bin/echo "    named \"nscaTarget.dta\", the value in that file is used as the"
/bin/echo "    destination for NSCA data, else \"monitor1.wpprivate.com\" is"
/bin/echo "    used (nscaTarget.dta content should be the IP of monitor1 or"
/bin/echo "    another Nagios server)"
/bin/echo " 4. execution requires presence one parm file named \"oldFiles.dta\""
/bin/echo "    in the executing user's home directory,"
/bin/echo " 5. each parameter file line consists of 6 pipe-delimited fields:"
/bin/echo "           directory  - the directory for which to monitor files -"
/bin/echo "           ---------    if the path of interest contains date/time"
/bin/echo "                        values, variables may be specified to cause"
/bin/echo "                        substitution of system date/time values in"
/bin/echo "                        place of the variables; available variables"
/bin/echo "                        are:"
/bin/echo "    minuteVar          (minute of the hour, 0-59)"
/bin/echo "    minute0Var         (minute of the hour, 00-59)"
/bin/echo "    hourVar            (hour of the day, 0-23)"
/bin/echo "    hour0Var           (hour of the day, 00-23)"
/bin/echo "    dayVar             (day of the month, 1-31)"
/bin/echo "    day0Var            (day of the month, 01-31)"
/bin/echo "    daybVar            (day of the month, 1-31 with leading space for 1-9)"
/bin/echo "    monthVar           (month number, 1-12)"
/bin/echo "    month0Var          (month number, 01-12)"
/bin/echo "    yearVar            (ccyy)"
/bin/echo "    shortYearVar       (yy)"
/bin/echo "    weekdayNameVar     (abbreviated weekday name)"
/bin/echo "    fullWeekdayNameVar (full weekday name)"
/bin/echo "    monthNameVar       (abbreviated month name)"
/bin/echo "    fullMonthNameVar   (full month name)"
/bin/echo "    ticksVar           (seconds since epoch)"
/bin/echo "               Example (logfile named with today's date in CCYYMMDD format)"
/bin/echo "                       /local/logFiles/dailyLog.yearVarmonth0Varday0Var"
/bin/echo " \"find\" command args  - a \"~\"-delimited string consisting of"
/bin/echo " -------------------    either two or three arguments:"
/bin/echo "                        - \"-name\" and \"-amin\" values are required"
/bin/echo "                        - a \"-prune\" value is optional, when"
/bin/echo "                          present, it must be the first of the"
/bin/echo "                          three arguments provided (when a \"-prune\""
/bin/echo "                          value is present, the \"-name\" value"
/bin/echo "                          causes files/directories matching the"
/bin/echo "                          specified pattern to be excluded from"
/bin/echo "                          output from the \"find\" command)"
/bin/echo "                          Examples:"
/bin/echo "                          - \"*\"~+30"
/bin/echo "                            (find files with any name accessed more"
/bin/echo "                             than 30 minutes ago)"
/bin/echo "                            (whenever the \"-name\" value contains"
/bin/echo "                             an \"*\" to \"wild card\", the value"
/bin/echo "                             MUST be surrounded by double-quotes)"
/bin/echo "                          - \"example*\"~+30"
/bin/echo "                            (find files accessed more than 30"
/bin/echo "                             minutes ago and named starting with"
/bin/echo "                             \"example\")"
/bin/echo "                          - \"*example\"~+30"
/bin/echo "                            (find files accessed more than 30"
/bin/echo "                             minutes ago and named ending with"
/bin/echo "                             \"example\")"
/bin/echo "                          - \"*example*\"~+30"
/bin/echo "                            (ILLEGAL - the script will not correctly"
/bin/echo "                             process a \"-name\" value containing"
/bin/echo "                             multiple asterisks)"
/bin/echo "                          - example~+30"
/bin/echo "                            (find file accessed more than 30"
/bin/echo "                             minutes ago named \"example\")"
/bin/echo "                          - prune~example~+30"
/bin/echo "                            (find all files accessed more than 30"
/bin/echo "                             minutes ago but exclude file or"
/bin/echo "                             directory named \"example\")"
/bin/echo "                          - prune~\"example*\"~+30\""
/bin/echo "                            (find all files accessed more than 30"
/bin/echo "                             minutes ago but exclude files or"
/bin/echo "                             directories named beginning \"example\")"
/bin/echo "          thresholds  - if supplied, a comma-delimited string which"
/bin/echo "          ----------    may specify threshold values"
/bin/echo "                        Valid threshold parameter options:"
/bin/echo "                        (for count of \"old\" files)"
/bin/echo "                           warn       crit"
/bin/echo "                           noPerfData (no Nagios performance data)"
/bin/echo "                                      (i.e., no data to Graphite)"
/bin/echo "                        Examples:"
/bin/echo "                           warn=200"
/bin/echo "                           crit=500"
/bin/echo "                           warn=100,crit=200"
/bin/echo "                           warn=30,crit=100,noPerfData"
/bin/echo "    hostname override - if the target Nagios host is something other"
/bin/echo "    -----------------   than the local hostname, supply the target"
/bin/echo "                        Nagios host value here"
/bin/echo "         servicegroup - the desired Nagios \"servicegroup\""
/bin/echo "         ------------   association for this process - if blank"
/bin/echo "                        or invalid (not known to Nagios), the"
/bin/echo "                        default servicegroup assocation for this"
/bin/echo "                        host will be used"
/bin/echo "         bypass check - if used, this value must be the name of a"
/bin/echo "         ------------   routine in the executing user's home"
/bin/echo "                        directory used to determine whether or not"
/bin/echo "                        this particular process check (for string 1,"
/bin/echo "                        and string 2, if present) should be"
/bin/echo "                        bypassed; the routine must \"echo\" out"
/bin/echo "                        a value of YES, Yes, or yes (to bypass the"
/bin/echo "                        check, or NO, No, or no (to execute the"
/bin/echo "                        checkin - for example:"
/bin/echo "                        if a process should always be running except"
/bin/echo "                        when something else is running (like a"
/bin/echo "                        cold backup), then a bypass check routine"
/bin/echo "                        could be used to determine if that"
/bin/echo "                        \"something else\" is running or not; if so"
/bin/echo "                        the routine can output a \"yes\" (to bypass"
/bin/echo "                        the check) or \"no\" to NOT bypass and do"
/bin/echo "                        the check"
/bin/echo " 6. accepts \"debug\" argument (value \"debug\", case insensitive)"
/bin/echo "    to trace logic performed by the script and disable transmission"
/bin/echo "    of data to Nagios"
/bin/echo " 7. accepts \"tries=n\" argument (case insensitive) to be used"
/bin/echo "    as the \"max_check_attempts\" value in the auto-deployed"
/bin/echo "    Nagios service (if not supplied, default is 1)"
/bin/echo "    Explanation - if there are warning and/or critical thresholds"
/bin/echo "    in effect for this monitor, and if the warning/critical action"
/bin/echo "    (email/alert) should occur immediately upon a threshold being"
/bin/echo "    met/exceeded, then don't supply this argument, or supply"
/bin/echo "    \"tries=1\". However, if you want a threshold-met/exceeded"
/bin/echo "    condition to persist for some duration before action is taken,"
/bin/echo "    then use this argument to define the desired duration."
/bin/echo "    The \"duration\" is actually the number of consecutive times"
/bin/echo "    the Nagios service must be set to a WARNING or CRITICAL state"
/bin/echo "    in order to trigger an action. For example, if this script"
/bin/echo "    is run every five minutes and a non-OKAY condition must"
/bin/echo "    persist for ten minutes before notification takes place,"
/bin/echo "    then use \"tries=3\":"
/bin/echo "    a. problem state onset occurs - Nagios check attempts=1"
/bin/echo "    b. 5 minutes later, problem state persists - check attempts=2"
/bin/echo "    c. 5 minutes later, problem state persists - check attempts=3,"
/bin/echo "       action (email/alert) is triggered"
/bin/echo " 8. script will exit if a StopAllMonitoring (case insensitive) file"
/bin/echo "    is encountered in /var/tmp"
/bin/echo " 9. the script attempts to find the local hostname first in a file"
/bin/echo "    named Nagios_hostname.dta in the executing user's home"
/bin/echo "    directory, else the \"uname -n\" command is used"
/bin/echo "    (also see \"hostname override\" above)"
/bin/echo "10. for hosts/services not manually established in Nagios"
/bin/echo "    configuration, the first execution will trigger auto-deployment"
/bin/echo "    of the needed Nagios object(s) - to re-trigger auto-deployment,"
/bin/echo "    remove the \"NagiosServiceSetupTriggered_OldFiles\" file"
/bin/echo "    from the executing user's home directory (auto-deployment is"
/bin/echo "    also re-triggered by a change to directory-monitoring parameter"
/bin/echo "    input)"
/bin/echo "11. if expected execution results are not observed, check the"
/bin/echo "    contents of the \"nscaOldFiles_lastStatus\" file in the executing"
/bin/echo "    user's home directory"
exit 0
}
#
toNagios ()
{
if [ $debugSw = yes ]
then
   /bin/echo "##### toNagios #####"
   set -x
fi
#
if [ $serviceSetup = No ]
then
#  Nagios service setup not triggered with this script execution
   targetHost=$nagiosHost
   nagiosSvc="Old Files Check: ${directory}"
else
#  Nagios service setup triggered with this script execution (first time)
   targetHost=$nscaTarget
   nagiosSvc="Service Setup Capture"
   exitCode=1
   if [ "$capturedSvc" = "" ]
   then
      capturedSvc="Old Files Check: ${directory}"
   fi
   nagiosMsg="OldFiles@${nagiosHost}@${nagiosHostType}@${serviceGroup}@${capturedSvc}@${tries}@@"
   capturedSvc=""
fi
nscaPkt="${targetHost}${tab}${nagiosSvc}${tab}${exitCode}${tab}${nagiosMsg}"
if [ "$debugSw" = "no" ]
then
   /bin/echo "$nscaPkt" | $nscaBinaryPath $nscaTarget -c $nscaConfigPath > /dev/null 2>&1
else
   /bin/echo "$nscaPkt"
fi
}
#
thresholdCheck ()
{
exitCode=0
for thresholdType in warn crit
do
   case $thresholdType in
      warn) threshold=$warnThresh
            statCode=1 ;;
      crit) threshold=$critThresh
            statCode=2 ;;
   esac
   if [ $threshold != X ]
   then
      if [ $oldFileCount -ge $threshold ]
      then
         exitCode=$statCode
      fi
   fi
done
}
#
perfDataCheck ()
{
if [ "$debugSw" = "yes" ]
then
   /bin/echo "##### perfDataCheck #####"
   set -x
fi
#
/bin/echo $threshInput | /bin/grep noPerfData > /dev/null
if [ $? -eq 0 ]
then
   perfData=No
   threshInput=$(/bin/echo ${threshInput} | /bin/sed 's/noPerfData//g' | /bin/sed 's/,,/,/g')
fi
}
#
setupThresholds ()
{
warnThresh=X
critThresh=X
oldIFS="$IFS"
IFS=" "
threshInput=$(/bin/echo ${threshInput} | /bin/sed 's/,/ /g')
for argNum in $threshInput
do
   argType=$(/bin/echo ${argNum} | $cut -f1 -d"=")
   case $argType in
      crit) critThresh=$(/bin/echo ${argNum} | $cut -f2 -d"=") ;;
      warn) warnThresh=$(/bin/echo ${argNum} | $cut -f2 -d"=") ;;
   esac
done
#
if [ "$threshInput" != "" ]
then
   threshDisp=$(/bin/echo ${threshInput} | /bin/sed 's/ /,/g')
   threshDisp=", thresholds: ${threshDisp}"
else
   threshDisp=""
fi
IFS="$oldIFS"
}
#
dateVarSubstitution ()
{
dateVals=$(/bin/date '+%a|%A|%b|%B|%d|%e|%H|%k|%m|%M|%s|%y|%Y|')
#
dateVarString="hourVar minuteVar monthVar dayVar yearVar shortYearVar weekdayNameVar fullWeekdayNameVar hour0Var minute0Var day0Var month0Var monthNameVar fullMonthNameVar ticksVar"
#
oldIFS="$IFS"
IFS=" "
for dateVar in $dateVarString
do
   /bin/echo $pathWork | /bin/grep $dateVar > /dev/null
   if [ $? -eq 0 ]
   then
      case $dateVar in
         hourVar)
            dateVal=$(/bin/echo ${dateVals} | $cut -f8 -d"|" | /bin/sed 's/ //g') ;;
         minuteVar)
            minLeadZero=$(/bin/echo ${dateVals} | $cut -f10 -d"|")
            if [ $minLeadZero -lt 10 ]
            then
               dateVal=$(/bin/echo ${minLeadZero} | $cut -c2)
            fi ;;
         monthVar)
            monthLeadZero=$(/bin/echo ${dateVals} | $cut -f9 -d"|")
            if [ $monthLeadZero -lt 10 ]
            then
               dateVal=$(/bin/echo ${monthLeadZero} | $cut -c2)
            fi ;;
         dayVar)
            dateVal=$(/bin/echo ${dateVals} | $cut -f6 -d"|" | /bin/sed 's/ //g') ;;
         yearVar)
            dateVal=$(/bin/echo ${dateVals} | $cut -f13 -d"|") ;;
         shortYearVar)
            dateVal=$(/bin/echo ${dateVals} | $cut -f12 -d"|") ;;
         weekdayNameVar)
            dateVal=$(/bin/echo ${dateVals} | $cut -f1 -d"|") ;;
         fullWeekdayNameVar)
            dateVal=$(/bin/echo ${dateVals} | $cut -f2 -d"|") ;;
         hour0Var)
            dateVal=$(/bin/echo ${dateVals} | $cut -f7 -d"|") ;;
         minute0Var)
            dateVal=$(/bin/echo ${dateVals} | $cut -f10 -d"|") ;;
         day0Var)
            dateVal=$(/bin/echo ${dateVals} | $cut -f5 -d"|") ;;
         month0Var)
            dateVal=$(/bin/echo ${dateVals} | $cut -f9 -d"|") ;;
         monthNameVar)
            dateVal=$(/bin/echo ${dateVals} | $cut -f3 -d"|") ;;
         fullMonthNameVar)
            dateVal=$(/bin/echo ${dateVals} | $cut -f4 -d"|") ;;
         ticksVar)
            dateVal=$(/bin/echo ${dateVals} | $cut -f11 -d"|") ;;
      esac
      pathWork=$(/bin/echo ${pathWork} | /bin/sed "s/$dateVar/$dateVal/g")
   fi
done
IFS="$oldIFS"
}
#
processNameArg ()
{
if [ "$debugSw" = "yes" ]
then
   /bin/echo "##########################"
   /bin/echo "##### processNameArg #####"
   /bin/echo "##########################"
   set -x
fi
#
wildCardSw=No
wildCardPrefix=""
wildCardSuffix=""
/bin/echo "$nameArg" | /bin/grep "\*" > /dev/null
if [ $? -eq 0 ]
then
   wildCardSw=Yes
   wildCardWork=$(/bin/echo ${nameArg} | /bin/sed 's/\*/|/' | /bin/sed 's/\"//g')
   oldIFS="$IFS"
   IFS="|"
   set -- $wildCardWork
   wildCardPrefix=$1
   wildCardSuffix=$2
   IFS="$oldIFS"
else
   nameArg=$(/bin/echo ${nameArg} | /bin/sed 's/"//g')
fi
}
serviceLoop ()
{
if [ "$debugSw" = "yes" ]
then
   /bin/echo "#######################"
   /bin/echo "##### serviceLoop #####"
   /bin/echo "#######################"
   set -x
fi
#
for parmLine in `/bin/cat $parmFile`
do
   oldIFS="$IFS"
   IFS="|"
   set -- $parmLine
   directory=$1
   overrideHost=$4
   bypassCheck=$6
   IFS=" "
   set -- $bypassCheck
   bypassCheck=$1
   bypassCheckArg=$2
   IFS="$oldIFS"
   if [ "$bypassCheck" = " " -o "$bypassCheck" = "" ]
   then
      bypassSw=No
   else
      /usr/bin/test -s ${homeDir}/${bypassCheck}
      if [ $? -eq 0 ]
      then
         bypassSw=$(${homeDir}/${bypassCheck} ${bypassCheckArg})
      else
         bypassSw=No
      fi
   fi
   case $bypassSw in
      NO|No|no)
         if [ "$overrideHost" != "" ]
         then
            nagiosHost=$overrideHost
         fi
         toNagios ;;
   esac
done
exit 0
}
#
initializeServiceCapture ()
{
if [ "$debugSw" = "yes" ]
then
   /bin/echo "####################################"
   /bin/echo "##### initializeServiceCapture #####"
   /bin/echo "####################################"
   set -x
fi
#
initializeHostsFile=/tmp/nscaOldFiles_initializeHosts
/bin/cat /dev/null > $initializeHostsFile
for parmLine in `/bin/cat ${parmFile}`
do
   oldIFS="$IFS"
   IFS="|"
   set -- $parmLine
   nagiosHostOverride=$4
   bypassCheck=$6
   IFS=" "
   set -- $bypassCheck
   bypassCheck=$1
   bypassCheckArg=$2
   IFS="$oldIFS"
   if [ "$bypassCheck" = " " -o "$bypassCheck" = "" ]
   then
      bypassSw=No
   else
      /usr/bin/test -s ${homeDir}/${bypassCheck}
      if [ $? -eq 0 ]
      then
         bypassSw=$(${homeDir}/${bypassCheck} ${bypassCheckArg})
      else
         bypassSw=No
      fi
   fi
   case $bypassSw in
      NO|No|no)
         if [ "$nagiosHostOverride" = "" ]
         then
            nagiosHostOverride=$saveNagiosHost
         fi
         hostOverrideArg="|${nagiosHostOverride}|"
         /bin/grep "$hostOverrideArg" $initializeHostsFile > /dev/null
         if [ $? -ne 0 ]
         then
            /bin/echo "$hostOverrideArg" >> $initializeHostsFile
            nagiosHost=$nagiosHostOverride
            capturedSvc="ACCUMULATE START"
            toNagios
            /bin/sleep 2
         fi ;;
   esac
done
/bin/sleep 10
}
#
noBypass ()
{
if [ "$debugSw" = "yes" ]
then
   /bin/echo "####################"
   /bin/echo "##### noBypass #####"
   /bin/echo "####################"
   set -x
fi
#
if [ "$overrideHost" != "" ]
then
   nagiosHost=$overrideHost
fi
if [ "$serviceGroup" = "" ]
then
   serviceGroup=APPNAME
fi
perfData=Yes
perfDataCheck
setupThresholds
pathWork=$directory
dateVarSubstitution
/usr/bin/test -d $pathWork
if [ $? -eq 0 ]
then
   if [ "$findArg1" = "prune" ]
   then
      nameArg=$findArg2
      processNameArg
      mins=$findArg3
      if [ $wildCardSw = Yes ]
      then
         oldFileCount=$(/usr/bin/find $pathWork -name "${wildCardPrefix}*${wildCardSuffix}" -prune -o -amin $findArg3 -print | /usr/bin/wc -l | /bin/sed 's/ //g')
      else
         oldFileCount=$(/usr/bin/find $pathWork -name ${nameArg} -prune -o -amin $findArg3 -print | /usr/bin/wc -l | /bin/sed 's/ //g')
      fi
   else
      nameArg=$findArg1
      processNameArg
      mins=$findArg2
      if [ $wildCardSw = Yes ]
      then
         oldFileCount=$(/usr/bin/find $pathWork -name "${wildCardPrefix}*${wildCardSuffix}" -amin $findArg2 | /usr/bin/wc -l | /bin/sed 's/ //g')
      else
         oldFileCount=$(/usr/bin/find $pathWork -name ${nameArg} -amin $findArg2 | /usr/bin/wc -l | /bin/sed 's/ //g')
      fi
   fi
   thresholdCheck
   case $exitCode in
      0) status=OK ;;
      1) status=WARNING ;;
      2) status=CRITICAL ;;
   esac
   msg="OldFileCount=$oldFileCount"
   if [ "$threshDisp" != "" ]
   then
      threshDisp="${threshDisp}, minutes=${mins}"
   fi
   if [ $perfData = Yes ]
   then
      nagiosMsg="OldFiles ${status}: ${msg}${threshDisp} | twpOldFiles ${status} ${msg}"
   else
      nagiosMsg="OldFiles ${status}: ${msg}${threshDisp}"
   fi
   /bin/echo "processing completed normally" > $lastStatus
else
   nagiosMsg="argument-supplied directory $pathWork does not exist"
   /bin/echo "$nagiosMsg" > $lastStatus
   exitCode=1
fi
toNagios
}
#
/usr/bin/test -f /bin/cut
if [ $? -eq 0 ]
then
   cut=/bin/cut
else
   cut=/usr/bin/cut
fi
#
tries=1
debugSw=no
IFS="
"
#
for inputArg in $1 $2 $3
do
   /bin/echo "$inputArg" | /bin/grep -i help > /dev/null
   if [ $? -eq 0 ]
   then
      displayDocumentation
   else
      /bin/echo "$inputArg" | /bin/grep -i debug > /dev/null
      if [ $? -eq 0 ]
      then
         /bin/echo " ##### Top of Mainline #####"
         debugSw=yes
         set -x
      else
         /bin/echo "$inputArg" | /bin/grep "tries=" > /dev/null
         if [ $? -eq 0 ]
         then
            oldIFS="$IFS"
            IFS="="
            set -- $inputArg
            tries=$2
            IFS="$oldIFS"
            triesHold=$(/bin/echo ${tries} | /bin/sed 's/[0-9]//g')
            triesHold=$(/bin/echo ${tries} | /bin/sed 's/[0-9]//g')
            if [ "$triesHold" != "" ]
            then
#              The tries value is not numeric, default to 1
               tries=1
            fi
         fi
      fi
   fi
done
#
owner=$(/usr/bin/whoami)
homeDir=$(/bin/grep ${owner} /etc/passwd | $cut -f6 -d":")
#
lastStatus=${homeDir}/nscaOldFiles_lastStatus
#
# Determine the path to the send_nsca and send_nsca.cfg modules, if any
nscaFound=No
for nscaDir in $homeDir /usr/local/bin /usr/local/nagios
do
   /usr/bin/test -s ${nscaDir}/send_nsca
   if [ $? -eq 0 ]
   then
      nscaBinaryPath=${nscaDir}/send_nsca
      /usr/bin/test -s ${nscaDir}/send_nsca.cfg
      if [ $? -eq 0 ]
      then
         nscaConfigPath=${nscaDir}/send_nsca.cfg
         nscaFound=Yes
         break
      fi
   fi
done
if [ $nscaFound = No ]
then
   /bin/echo "communication with Nagios not possible, NSCA binary not present" > $lastStatus
   exit 0
fi
#
/usr/bin/test -s ${homeDir}/nscaTarget.dta
if [ $? -eq 0 ]
then
   read nscaTarget < ${homeDir}/nscaTarget.dta
else
   nscaTarget=monitor1.wpprivate.com
fi
#
# Capture the name to use as the target host in Nagios
# from the ${homeDir}/Nagios_hostname.dta file, else use the "uname -n" command
/usr/bin/test -s ${homeDir}/Nagios_hostname.dta
if [ $? -eq 0 ]
then
   read nagiosHost < ${homeDir}/Nagios_hostname.dta
else
   nagiosHost=$(/bin/uname -n | $cut -f1 -d".")
fi
saveNagiosHost=$nagiosHost
#
exitCode=0
tab="	"
#
serviceSetup=No
#
parmFile=${homeDir}/oldFiles.dta
/usr/bin/test -s $parmFile
if [ $? -eq 0 ]
then
#  The required input parameter file does exist with a non-zero size
   savedParms=/tmp/nscaOldFiles_parmsSaved
   /usr/bin/test -s $savedParms
   if [ $? -eq 0 ]
   then
#     There is a saved copy of the parameter file, is it different from the
#     current version?
      /usr/bin/diff $parmFile $savedParms > /dev/null
      if [ $? -ne 0 ]
      then
#        The current and saved parameters are not the same, save the current
#        parameters and trigger Nagios service setup
         serviceSetup=Yes
         /bin/cat $parmFile > $savedParms
      fi
   else
#     There is not a saved copy of the parameter file; save it and trigger
#     Nagios service setup
      serviceSetup=Yes
      /bin/cat $parmFile > $savedParms
   fi
else
#  The required parameter file is null or absent, exit
   /bin/echo "required parm file ${parmFile} is absent or null, exiting" > $lastStatus
   exit 1
fi
#
# Check for existence of a StopAllMonitoring file in /var/tmp, if it exists,
# then bypass processing
ls /var/tmp | /bin/grep -i StopAllMonitoring > /dev/null
if [ $? -eq 0 ]
then
   nagiosMsg="StopAllMonitoring file encountered, exiting"
   /bin/echo "$nagiosMsg" > $lastStatus
   serviceLoop
fi
#
runCount=$(/bin/ps -ef | /bin/grep nscaOldFiles | /bin/grep -v grep | /usr/bin/wc -l | /bin/sed 's/ //g')
if [ $runCount -gt 4 ]
then
   nagiosMsg="script backlog, nscaOldFiles exiting, runCount: $runCount" > $lastStatus
   /bin/echo "$nagiosMsg" > $lastStatus
   serviceLoop
fi
#
# Has the number of Nagios check attempts changed?
savedTries=/tmp/nscaOldFiles_tries_saved
/usr/bin/test -s $savedTries
if [ $? -eq 0 ]
then
   read savedTriesData < $savedTries
   if [ "$tries" != "$savedTriesData" ]
   then
#     The number of check attempts has changed
      serviceSetup=Yes
      /bin/echo "$tries" > $savedTries
   fi
else
   /bin/echo "$tries" > $savedTries
fi
#
serviceSetupFlag=${homeDir}/NagiosServiceSetupTriggered_OldFiles
/usr/bin/test -f $serviceSetupFlag
if [ $? -ne 0 ]
then
   /bin/touch $serviceSetupFlag
   serviceSetup=Yes
fi
#
if [ $serviceSetup = Yes ]
then
#  Trigger auto-deployment of Nagios service
   /usr/bin/test -s /etc/redhat-release
   if [ $? -eq 0 ]
   then
      /bin/grep CentOS /etc/redhat-release > /dev/null
      if [ $? -ne 0 ]
      then
         /bin/grep "Red Hat" /etc/redhat-release > /dev/null
         if [ $? -ne 0 ]
         then
            nagiosHostType=Unknown
         else
            nagiosHostType=RedHat
         fi
      else
         nagiosHostType=CentOS
      fi
   else
      /bin/uname -a | /bin/grep -i ubuntu > /dev/null
      if [ $? -eq 0 ]
      then
         nagiosHostType=Ubuntu
      else
         nagiosHostType=Unknown
      fi
   fi
   serviceSetup=Yes
   initializeServiceCapture
else
#  Nagios service setup previously triggered
   serviceSetup=No
fi
#
for parmLine in `/bin/cat $parmFile`
do
   oldIFS="$IFS"
   IFS="|"
   set -- $parmLine
   directory=$1
   findArgs=$2
   threshInput=$3
   overrideHost=$4
   serviceGroup=$5
   bypassCheck=$6
   IFS=" "
   set -- $bypassCheck
   bypassCheck=$1
   bypassCheckArg=$2
   IFS="~"
   set -- $findArgs
   findArg1=$1
   findArg2=$2
   findArg3=$3
   IFS="$oldIFS"
   if [ "$bypassCheck" = " " -o "$bypassCheck" = "" ]
   then
      bypassSw=No
   else
      /usr/bin/test -s $bypassCheck
      if [ $? -eq 0 ]
      then
         bypassSw=$(${homeDir}/${bypassCheck} ${bypassCheckArg})
      else
         bypassSw=No
      fi
   fi
   case $bypassSw in
      NO|No|no) noBypass ;;
   esac
done
#
IFS="
"
if [ $serviceSetup = Yes ]
then
   for hostArg in `/bin/cat $initializeHostsFile`
   do
      nagiosHost=$(/bin/echo ${hostArg} | /bin/sed 's/|//g')
      capturedSvc="ACCUMULATE STOP"
      toNagios
      /bin/sleep 2
   done
   /bin/sleep 10
fi
#
