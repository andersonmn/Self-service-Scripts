#!/bin/ksh
displayDocumentation ()
{
/bin/echo "Script nscaCPU information and usage:"
/bin/echo "-------------------------------------"
/bin/echo " 1. captures CPU metrics for Linux systems only"
/bin/echo " 2. communicates with Nagios via NSCA"
/bin/echo "    (NSCA daemon and configuration file must be present in the"
/bin/echo "     home directory of the executing user or in /usr/local/bin,"
/bin/echo "     else the script will exit)"
/bin/echo " 3. if the executing user's home directory contains a non-null file"
/bin/echo "    named \"nscaTarget.dta\", the value in that file is used as the"
/bin/echo "    destination for NSCA data, else \"monitor1.wpprivate.com\" is"
/bin/echo "    used (nscaTarget.dta content should be the IP of monitor1 or"
/bin/echo "    another Nagios server)"
/bin/echo " 4. accepts arguments for warning/critical thresholds"
/bin/echo "    - must be specified as a comma-delimited, no-space string"
/bin/echo "    - options must appear exactly as shown, case sensitive"
/bin/echo "    - may appear in any order or combination"
/bin/echo "    - metric-to-threshold compares use the \"-ge\" operator"
/bin/echo "      Valid threshold parameter options:"
/bin/echo "         userWarn   userCrit        (cpuUser%)"
/bin/echo "         sysWarn    sysCrit         (cpuSys%)"
/bin/echo "         waitWarn   waitCrit        (cpuWait%)"
/bin/echo "         totalWarn  totalCrit       (cpuTotal%)"
/bin/echo "         loadWarn   loadCrit        (load average per processor)"
/bin/echo "         noPerfData                 (no Nagios performance data)"
/bin/echo "                                    (i.e., no data to Graphite)"
/bin/echo "      Examples:"
/bin/echo "         totalWarn=80,totalCrit=90"
/bin/echo "         waitWarn=50,totalCrit=95,loadWarn=2,loadCrit=4"
/bin/echo "         waitCrit=60,noPerfData,totalWarn=90,totalCrit=95"
/bin/echo " 5. accepts \"mpstat\", \"top\", or \"vmstat\" argument"
/bin/echo "    to force use of one of these three utilities"
/bin/echo "                       --OR--"
/bin/echo "    in the absence of any of these arguments, they are attempted"
/bin/echo "    in order of priority, as presence of the utility is determined"
/bin/echo "              first priority: mpstat"
/bin/echo "             second priority: top"
/bin/echo "              third priority: vmstat"
/bin/echo " 6. accepts \"tries=n\" argument (case insensitive) to be used"
/bin/echo "    as the \"max_check_attempts\" value in the auto-deployed"
/bin/echo "    Nagios service (if not supplied, default is 1)"
/bin/echo "    Explanation - if there are warning and/or critical thresholds"
/bin/echo "    in effect for this monitor, and if the warning/critical action"
/bin/echo "    (email/alert) should occur immediately upon a threshold being"
/bin/echo "    met/exceeded, then don't supply this argument, or supply"
/bin/echo "    \"tries=1\". However, if you want a threshold-met/exceeded"
/bin/echo "    condition to persist for some duration before action is taken,"
/bin/echo "    then use this argument to define the desired duration."
/bin/echo "    The \"duration\" is actually the number of consecutive times"
/bin/echo "    the Nagios service must be set to a WARNING or CRITICAL state"
/bin/echo "    in order to trigger an action. For example, if this script"
/bin/echo "    is run every five minutes and a non-OKAY condition must"
/bin/echo "    persist for ten minutes before notification takes place,"
/bin/echo "    then use \"tries=3\":"
/bin/echo "    a. problem state onset occurs - Nagios check attempts=1"
/bin/echo "    b. 5 minutes later, problem state persists - check attempts=2"
/bin/echo "    c. 5 minutes later, problem state persists - check attempts=3,"
/bin/echo "       action (email/alert) is triggered"
/bin/echo " 7. accepts \"debug\" argument (value \"debug\", case insensitive)"
/bin/echo "    to trace logic performed by the script and disable transmission"
/bin/echo "    of data to Nagios"
/bin/echo " 8. script will exit if a StopAllMonitoring (case insensitive) file"
/bin/echo "    is encountered in /var/tmp"
/bin/echo " 9. the script attempts to find the local hostname first in a file"
/bin/echo "    named Nagios_hostname.dta in the executing user's home"
/bin/echo "    directory, else the \"uname -n\" command is used"
/bin/echo "10. for hosts/services not manually established in Nagios"
/bin/echo "    configuration, the first execution will trigger auto-deployment"
/bin/echo "    of the needed Nagios object(s) - to re-trigger auto-deployment,"
/bin/echo "    remove the \"NagiosServiceSetupTriggered_CPU\" file"
/bin/echo "    from the executing user's home directory (auto-deployment also"
/bin/echo "    re-triggered by a change to the \"tries\" parameter)"
/bin/echo "11. if expected execution results are not observed, check the"
/bin/echo "    contents of the \"nscaCPU_lastStatus\" file in the executing"
/bin/echo "    user's home directory"
exit 0
}
#
toNagios ()
{
if [ $debugSw = yes ]
then
   /bin/echo "####################"
   /bin/echo "##### toNagios #####"
   /bin/echo "####################"
   set -x
fi
#
# Format an NSCA-compatible string and send to Nagios
nscaPkt="${nagiosHost}${tab}${nagiosSvc}${tab}${exitCode}${tab}${nagiosMsg}"
if [ $debugSw = no ]
then
   /bin/echo "$nscaPkt" | $nscaBinaryPath $nscaTarget -c $nscaConfigPath > /dev/null 2>&1
else
   echo "$nscaPkt"
fi
/bin/echo "$lastStatusMsg" >> $lastStatus
exit 0
}
#
getMetric ()
{
if [ "$debugSw" = "yes" ]
then
   /bin/echo "##### getMetric #####"
   set -x
fi
#
# Capture the appropriate metric from the output line and add to string
# which will be sent to Nagios
metric=$(/bin/echo ${cpuOut} | $awk -v count=${cpuField} '{print $count}' | $cut -f1 -d"%")
metricWork=$(/bin/echo ${metric} | /bin/sed 's/[0-9,.]//g')
if [ "$metricWork" = "" ]
then
   metricClause="${metricLabel}=${metric}"
   metricString="${metricString}${metricClause} "
else
   nagiosMsg="script found non-numeric value {${metric}) for ${metricLabel}, exiting"
   lastStatusMsg="$nagiosMsg"
   toNagios
fi
}
#
getCpuViaVmstat ()
{
if [ "$debugSw" = "yes" ]
then
   /bin/echo "##### getCpuViaVmstat #####"
   set -x
fi
#
vmstatPath=/usr/bin/vmstat
/usr/bin/test -f $vmstatPath
if [ $? -ne 0 ]
then
   nagiosMsg="vmstat command not available to script nscaCPU running on $nagiosHost"
   lastStatusMsg="$nagiosMsg"
   toNagios
fi
cpuOut=$(/usr/bin/vmstat 1 2 2>/dev/null | /usr/bin/tail -1)
if [ "$cpuOut" = "" ]
then
   nagiosMsg="vmstat output not available to script nscaCPU running on $nagiosHost"
   lastStatusMsg="$nagiosMsg"
   toNagios
fi
#
cpuField=12
for metricLabel in User% Sys% Idle% Wait%
do
   ((cpuField = cpuField + 1))
   getMetric
   case $cpuField in
      13) cpuUser=$metric ;;
      14) cpuSys=$metric ;;
      15) cpuIdle=$metric ;;
      16) cpuWait=$metric ;;
   esac
done
}
#
getCpuViaTop ()
{
if [ "$debugSw" = "yes" ]
then
   /bin/echo "##### getCpuViaTop #####"
   set -x
fi
#
topPath=/usr/bin/top
/usr/bin/test -f $topPath
if [ $? -ne 0 ]
then
   if [ "$metricSource" = "" ]
   then
      getCpuViaVmstat
   else
      nagiosMsg="top command not available to script nscaCPU running on $nagiosHost"
      lastStatusMsg="$nagiosMsg"
      toNagios
   fi
fi
if [ "$cpuOut" = "" ]
then
   cpuOut=$(${topPath} -n 1 | /bin/grep "Cpu(s):")
   if [ "$cpuOut" = "" ]
   then
      nagiosMsg="top output not available to script nscaCPU running on $nagiosHost"
      lastStatusMsg="$nagiosMsg"
      toNagios
   fi
#
   cpuField=1
   for metricLabel in User% Sys% Nice% Idle% Wait% HI% SI% Steal%
   do
      ((cpuField = cpuField + 1))
      getMetric
      case $cpuField in
         2) cpuUser=$metric ;;
         3) cpuSys=$metric ;;
         4) cpuNice=$metric ;;
         5) cpuIdle=$metric ;;
         6) cpuWait=$metric ;;
         7) cpuHI=$metric ;;
         8) cpuSI=$metric ;;
         9) cpuST=$metric ;;
      esac
   done
fi
}
#
getCpuViaMpstat ()
{
if [ "$debugSw" = "yes" ]
then
   /bin/echo "##### getCpuViaMpstat #####"
   set -x
fi
#
mpstatPath=/usr/bin/mpstat
/usr/bin/test -f $mpstatPath
if [ $? -ne 0 ]
then
   if [ "$metricSource" = "" ]
   then
      getCpuViaTop
   else
      nagiosMsg="mpstat command not available to script nscaCPU running on $nagiosHost"
      lastStatusMsg="$nagiosMsg"
      toNagios
   fi
fi
if [ "$cpuOut" = "" ]
then
   $mpstatPath 1 3 > /tmp/mpstatOut
   cpuOut=$(/usr/bin/tail -1 /tmp/mpstatOut)
   columns=$(/bin/grep "%idle" /tmp/mpstatOut)
   if [ "$cpuOut" = "" ]
   then
      nagiosMsg="mpstat output not available to script nscaCPU running on $nagiosHost"
      lastStatusMsg="$nagiosMsg"
      toNagios
   fi
#
#  In case the output contains a field with AM or PM values, the column number
#  for the data items of interest must be offset by one
   field2=$(/bin/echo ${columns} | $awk '{print $2}')
   case $field2 in
      AM) columnOffset=1 ;;
      PM) columnOffset=1 ;;
       *) columnOffset=0 ;;
   esac
#
   headingCount=0
   oldIFS="$IFS"
   IFS=" "
#
#  Note "user" and "usr" below - one or the other is output from mpstat
#  depending on the version
   for heading in $columns
   do
      ((headingCount = headingCount + 1))
      ((cpuField = headingCount - columnOffset))
      case $heading in
           %user) metricLabel=User%
                  getMetric
                  cpuUser=$metric ;;
            %usr) metricLabel=User%
                  getMetric
                  cpuUser=$metric ;;
           %nice) metricLabel=Nice%
                  getMetric
                  cpuSys=$metric ;;
            %sys) metricLabel=Sys%
                  getMetric
                  cpuNice=$metric ;;
         %iowait) metricLabel=Wait%
                  getMetric
                  cpuWait=$metric ;;
            %irq) metricLabel=HI%
                  getMetric
                  cpuHI=$metric ;;
           %soft) metricLabel=SI%
                  getMetric
                  cpuSI=$metric ;;
          %steal) metricLabel=Steal%
                  getMetric
                  cpuST=$metric ;;
          %guest) metricLabel=Guest%
                  getMetric
                  cpuGuest=$metric ;;
           %idle) metricLabel=Idle%
                  getMetric
                  cpuIdle=$metric ;;
      esac
   done
   IFS="$oldIFS"
fi
}
#
validateProcessorCount ()
{
if [ "$debugSw" = "yes" ]
then
   /bin/echo "##### validateProcessorCount #####"
   set -x
fi
#
# If a processor count has been successfully captured, calculate the
# load average per processor
if [ "$procNum" != "" ]
then
   if [ $procNum -gt 0 ]
   then
      loadPerProc=$(/bin/echo ${loadAvg} ${procNum} | $awk '{printf "%4.2f",($1/$2)}')
   else
      nagiosMsg="number of processors not available to script nscaCPU running on $nagiosHost"
      lastStatusMsg="$nagiosMsg"
      toNagios
   fi
else
   nagiosMsg="number of processors not available to script nscaCPU running on $nagiosHost"
   lastStatusMsg="$nagiosMsg"
   toNagios
fi
}
#
perfDataCheck ()
{
if [ "$debugSw" = "yes" ]
then
   /bin/echo "##### perfDataCheck #####"
   set -x
fi
#
# If a a thresholds argument has been supplied, and if that argument contains
# the string "noPerfData", set the perfData switch to "No" (Nagios will not 
# receive and perfdata and thus metrics will not be interfaced to Graphite)
/bin/echo $argString | /bin/grep noPerfData > /dev/null
if [ $? -eq 0 ]
then
   perfData=No
   argString=`/bin/echo $argString | /bin/sed 's/noPerfData//g' | /bin/sed 's/,,/,/g'`
fi
}
#
IFS=" "
perfData=Yes
debugSw=no
argString=""
metricSource=""
tries=1
#
/usr/bin/test -f /bin/awk
if [ $? -eq 0 ]
then
   awk=/bin/awk
else
   awk=/usr/bin/awk
fi
/usr/bin/test -f /bin/cut
if [ $? -eq 0 ]
then
   cut=/bin/cut
else
   cut=/usr/bin/cut
fi
#
# Process input arguments, if any
for inputArg in $1 $2 $3 $4 $5
do
   case $inputArg in
      mpstat) metricSource=mpstat ;;
         top) metricSource=top ;;
      vmstat) metricSource=vmstat ;;
           *) /bin/echo "$inputArg" | /bin/grep -i help > /dev/null
              if [ $? -eq 0 ]
              then
                 displayDocumentation
              else
                 /bin/echo "$inputArg" | /bin/grep -i debug > /dev/null
                 if [ $? -eq 0 ]
                 then
                    /bin/echo "##### Top of mainline #####"
                    debugSw=yes
                    set -x
                 else
                    /bin/echo "$inputArg" | /bin/grep -i "tries=" > /dev/null
                    if [ $? -eq 0 ]
                    then
                       oldIFS="$IFS"
                       IFS="="
                       set -- $inputArg
                       tries=$2
                       IFS="$oldIFS"
#                      Is the tries value numeric?
                       triesHold=$(/bin/echo ${tries} | /bin/sed 's/[0-9]//g')
                       if [ "$triesHold" != "" ]
                       then
#                         The tries value is not numeric, default to 1
                          tries=1
                       fi
                    else
                       argString="$inputArg"
                       perfDataCheck
                       argString=$(/bin/echo ${argString} | /bin/sed 's/,/ /g')
                    fi
                 fi
              fi ;;
   esac
done
#
# Determine the path to the send_nsca and send_nsca.cfg modules, if any
owner=$(/usr/bin/whoami)
homeDir=$(/bin/grep ${owner} /etc/passwd | $cut -f6 -d":")
nscaFound=No
for nscaDir in $homeDir /usr/local/bin /usr/local/nagios
do
   /usr/bin/test -s ${nscaDir}/send_nsca
   if [ $? -eq 0 ]
   then
      nscaBinaryPath=${nscaDir}/send_nsca
      /usr/bin/test -s ${nscaDir}/send_nsca.cfg
      if [ $? -eq 0 ]
      then
         nscaConfigPath=${nscaDir}/send_nsca.cfg
         nscaFound=Yes
         break
      fi
   fi
done
#
/usr/bin/test -s ${homeDir}/nscaTarget.dta
if [ $? -eq 0 ]
then
   read nscaTarget < ${homeDir}/nscaTarget.dta
else
   nscaTarget=monitor1.wpprivate.com
fi
#
lastStatus=${homeDir}/nscaCPU_lastStatus
/bin/cat /dev/null > $lastStatus
lastStatusMsg="processing completed normally"
#
if [ $nscaFound = No ]
then
   /bin/echo "communication with Nagios not possible, NSCA binary not present" >> $lastStatus
   exit 1
fi
#
# Capture the name to use as the target host in Nagios from the
# ${homeDir}/Nagios_hostname.dta file, else use the "uname -n" command
/usr/bin/test -s ${homeDir}/Nagios_hostname.dta
if [ $? -eq 0 ]
then
   read nagiosHost <  ${homeDir}/Nagios_hostname.dta
else
   nagiosHost=$(/bin/uname -n | $cut -f1 -d".")
fi
#
exitCode=0
tab="	"
nagiosSvc="CPU Utilization"
#
# If a StopAllMonitoring file exists in /var/tmp, bypass this monitoring
ls /var/tmp | /bin/grep -i StopAllMonitoring > /dev/null
if [ $? -eq 0 ]
then
   nagiosMsg="StopAllMonitoring file encountered, exiting"
   lastStatusMsg="$nagiosMsg"
   toNagios
fi
#
processCount=$(/bin/ps -ef | /bin/grep nscaCPU | /bin/grep -v grep | /usr/bin/wc -l | /bin/sed 's/ //g')
if [ $processCount -gt 3 ]
then
   nagiosMsg="prior execution not completed, exiting"
   lastStatusMsg="$nagiosMsg"
   toNagios
fi
#
serviceSetup=No
#
savedTries=/tmp/nscaCPU_savedTries
/usr/bin/test -f $savedTries
if [ $? -eq 0 ]
then
   read savedTriesData < $savedTries
   if [ "$savedTriesData" != "$tries" ]
   then
      serviceSetup=Yes
      /bin/echo "$tries" > $savedTries
   fi
else
   /bin/echo "$tries" > $savedTries
fi
#
serviceSetupFlag=${homeDir}/NagiosServiceSetupTriggered_CPU
/usr/bin/test -f $serviceSetupFlag
if [ $? -ne 0 ]
then
   serviceSetup=Yes
   /bin/touch $serviceSetupFlag
fi
#
if [ $serviceSetup = Yes ]
then
#  Trigger auto-deployment of Nagios service
   /usr/bin/test -s /etc/redhat-release
   if [ $? -eq 0 ]
   then
      /bin/grep CentOS /etc/redhat-release > /dev/null
      if [ $? -ne 0 ]
      then
         /bin/grep "Red Hat" /etc/redhat-release > /dev/null
         if [ $? -ne 0 ]
         then
            nagiosHostType=Unknown
         else
            nagiosHostType=RedHat
         fi
      else
         nagiosHostType=CentOS
      fi
   else
      /bin/uname -a | /bin/grep -i ubuntu > /dev/null
      if [ $? -eq 0 ]
      then
         nagiosHostType=Ubuntu
      else
         nagiosHostType=Unknown
      fi
   fi
   nagiosMsg="CPU@${nagiosHost}@${nagiosHostType}@APPNAME@CPU Utilization@${tries}@"
   nagiosHost=$nscaTarget
#  The nagiosHost value in the nagiosMsg string must be the local hostname
#  but the nagiosHost value used in the nscaPkt sent to the Nagios
#  "Service Setup Capture" service must be monitor1
   nagiosSvc="Service Setup Capture"
   exitCode=1
   toNagios
fi
#
# Set threshold values
userCritThresh=X
userWarnThresh=X
sysCritThresh=X
sysWarnThresh=X
waitCritThresh=X
waitWarnThresh=X
totalCritThresh=X
totalWarnThresh=X
loadCritThresh=X
loadWarnThresh=X
#
if [ "$argString" != "" ]
then
   for argNum in $argString
   do
      argType=`/bin/echo $argNum | $cut -f1 -d"="`
      case $argType in
         userCrit) userCritThresh=`/bin/echo $argNum | $cut -f2 -d"="` ;;
         userWarn) userWarnThresh=`/bin/echo $argNum | $cut -f2 -d"="` ;;
          sysCrit) sysCritThresh=`/bin/echo $argNum | $cut -f2 -d"="` ;;
          sysWarn) sysWarnThresh=`/bin/echo $argNum | $cut -f2 -d"="` ;;
         waitCrit) waitCritThresh=`/bin/echo $argNum | $cut -f2 -d"="` ;;
         waitWarn) waitWarnThresh=`/bin/echo $argNum | $cut -f2 -d"="` ;;
        totalCrit) totalCritThresh=`/bin/echo $argNum | $cut -f2 -d"="` ;;
        totalWarn) totalWarnThresh=`/bin/echo $argNum | $cut -f2 -d"="` ;;
         loadCrit) loadCritThresh=`/bin/echo $argNum | $cut -f2 -d"="` ;;
         loadWarn) loadWarnThresh=`/bin/echo $argNum | $cut -f2 -d"="` ;;
      esac
   done
fi
#
# Format the threshold string, if any, for display in the Nagios message
if [ "$argString" != "" ]
then
   thresholdDisp=""
   for threshArg in $argString
   do
      /bin/echo $threshArg | /bin/grep load > /dev/null
      if [ $? -ne 0 ]
      then
         thresholdDisp="${thresholdDisp}${threshArg}%,"
      else
         thresholdDisp="${thresholdDisp}${threshArg},"
      fi
   done
   threshDispLength=${#thresholdDisp}
   ((newThreshDispLength = threshDispLength - 1))
   thresholdDisp=$(/bin/echo $thresholdDisp | $cut -c1-$newThreshDispLength)
   thresholdDisp=", thesholds: ${thresholdDisp}"
else
   thresholds=""
fi
#
IFS="
"
#
workFile=/tmp/nscaCPU_workFile
#
# Capture the 15-minute load average using "uptime"
loadAvg=$(/usr/bin/uptime | $awk '{print $NF}')
if [ "$loadAvg" = "" ]
then
   nagiosMsg="load average not available to script nscaCPU running on $nagiosHost"
   toNagios
fi
#
# Capture the system seconds-since-epoch value
SSE=$(/bin/date '+%s')
#
metricString=""
#
# Capture the number of processors for this system
procNum=$(/bin/grep processor /proc/cpuinfo | /usr/bin/wc -l | /bin/sed 's/ //g')
#
validateProcessorCount
#
# If an arguments dictated the method of metrics capture, use that method
cpuOut=""
case $metricSource in
   mpstat) getCpuViaMpstat ;;
      top) getCpuViaTop ;;
   vmstat) getCpuViaVmstat ;;
        *) getCpuViaMpstat ;;
esac
#
cpuTot=`/bin/echo $cpuIdle | $awk '{printf "%3.2f",(100-$1)}' | /bin/sed 's/ //g'`
#
metricClause="Total%=${cpuTot}"
metricString="${metricString}${metricClause}"
metricClause="LoadAvgPerProcessor=${loadPerProc}"
metricString="${metricString} ${metricClause}"
#
# Compare metrics to thresholds and set exitCode accordingly 
# (For Nagios, 0=OKAY, 1=WARNING, 2=CRITICAL)
for thresholdType in userWarn sysWarn waitWarn totalWarn loadWarn userCrit sysCrit waitCrit totalCrit loadCrit
do
   case $thresholdType in
      userWarn) metric=$cpuUser
                threshold=$userWarnThresh
                statCode=1 ;;
       sysWarn) metric=$cpuSys
                threshold=$sysWarnThresh
                statCode=1 ;;
      waitWarn) metric=$cpuWait
                threshold=$waitWarnThresh
                statCode=1 ;;
     totalWarn) metric=$cpuTot
                threshold=$totalWarnThresh
                statCode=1 ;;
      loadWarn) metric=$loadPerProc
                threshold=$loadWarnThresh
                statCode=1 ;;
      userCrit) metric=$cpuUser
                threshold=$userWarnThresh
                statCode=2 ;;
       sysCrit) metric=$cpuSys
                threshold=$sysCritThresh
                statCode=2 ;;
      waitCrit) metric=$cpuWait
                threshold=$waitCritThresh
                statCode=2 ;;
     totalCrit) metric=$cpuTot
                threshold=$totalCritThresh
                statCode=2 ;;
      loadCrit) metric=$loadPerProc
                threshold=$loadCritThresh
                statCode=2 ;;
   esac
   if [ $threshold != X ]
   then
      if [ $(/bin/echo "${metric}>=${threshold}" | /usr/bin/bc) -gt 0 ]
      then
         exitCode=$statCode
      fi
   fi
done
#
if [ $perfData = Yes ]
then
   nagiosMsg="${metricString}${thresholdDisp} | SSE=${SSE} ${metricString}"
else
   nagiosMsg="${metricString}${thresholdDisp}"
fi
# 
toNagios
