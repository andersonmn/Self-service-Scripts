#!/bin/ksh
displayDocumentation ()
{
/bin/echo "Script nscaUptime information and usage:"
/bin/echo "----------------------------------------"
/bin/echo " 1. this script is written for use only with systems which"
/bin/echo "    which are compatible with NSCA use (typically Linux only)"
/bin/echo " 2. captures host uptime value which is sent to Nagios via NSCA"
/bin/echo " 3. if the executing user's home directory contains a non-null file"
/bin/echo "    named \"nscaTarget.dta\", the value in that file is used as the"
/bin/echo "    destination for NSCA data, else \"monitor1.wpprivate.com\" is"
/bin/echo "    used (nscaTarget.dta content should be the IP of monitor1 or"
/bin/echo "    another Nagios server)"
/bin/echo " 4. the NSCA string is sent to the \"Uptime\" service under"
/bin/echo "    the Nagios host for this server"
/bin/echo " 5. the script attempts to find the local hostname first in a file"
/bin/echo "    named Nagios_hostname.dta in the executing user's home"
/bin/echo "    directory, else the \"uname -n\" command is used"
/bin/echo " 6. script will exit if a StopAllMonitoring (case insensitive) file"
/bin/echo "    is encountered in /var/tmp"
/bin/echo " 7. for hosts/services not manually established in Nagios"
/bin/echo "    configuration, the first execution will trigger auto-deployment"
/bin/echo "    of the needed Nagios object(s) - to re-trigger auto-deployment,"
/bin/echo "    remove the \"NagiosServiceSetupTriggered_Uptime\" file"
/bin/echo "    from the executing user's home directory"
/bin/echo " 8. if expected execution results are not observed, check the"
/bin/echo "    contents of the \"nscaUptime_lastStatus\" file in the executing"
/bin/echo "    user's home directory"
exit 0
}
#
toNagios ()
{
if [ $debugSw = yes ]
then
   /bin/echo "####################"
   /bin/echo "##### toNagios #####"
   /bin/echo "####################"
   set -x
fi
#
# Format an NSCA-compatible string and sent it to Nagios via NSCA
nscaPkt="${nagiosHost}${tab}${nagiosSvc}${tab}${exitCode}${tab}${nagiosMsg}"
if [ $debugSw = no ]
then
   /bin/echo "$nscaPkt" | $nscaBinaryPath $nscaTarget -c $nscaConfigPath > /dev/null 2>&1
else
   echo "$nscaPkt"
fi
#
if [ "$nagiosMsg" != "StopAllMonitoring file encountered, exiting" ]
then
   /bin/echo "processing completed normally" > $lastStatus
else
   /bin/echo "$nagiosMsg" > $lastStatus
fi
exit 0
}
#
/usr/bin/test -f /bin/cut
if [ $? -eq 0 ]
then
   cut=/bin/cut
else
   cut=/usr/bin/cut
fi
#
debugSw=no
# Process input arguments, if any
for inputArg in $1 $2
do
   /bin/echo "$inputArg" | /bin/grep -i help > /dev/null
   if [ $? -eq 0 ]
   then
      displayDocumentation
   else
      /bin/echo "$inputArg" | /bin/grep -i debug > /dev/null
      if [ $? -eq 0 ]
      then
         /bin/echo "##### Top of mainline #####"
         debugSw=yes
         set -x
      fi
   fi
done
#
# Identify path for send_nsca and send_nsca.cfg modules, if any
owner=$(/usr/bin/whoami)
homeDir=$(/bin/grep ${owner} /etc/passwd | $cut -f6 -d":")
lastStatus=${homeDir}/nscaUptime_lastStatus
#
nscaFound=No
for nscaDir in $homeDir /usr/local/bin /usr/local/nagios
do
   /usr/bin/test -s ${nscaDir}/send_nsca
   if [ $? -eq 0 ]
   then
      nscaBinaryPath=${nscaDir}/send_nsca
      /usr/bin/test -s ${nscaDir}/send_nsca.cfg
      if [ $? -eq 0 ]
      then
         nscaFound=Yes
         nscaConfigPath=${nscaDir}/send_nsca.cfg
         break
      fi
   fi
done
if [ $nscaFound = No ]
then
   /bin/echo "communication with Nagios not possible, NSCA binary not present" > $lastStatus
   exit 1
fi
#
/usr/bin/test -s ${homeDir}/nscaTarget.dta
if [ $? -eq 0 ]
then
   read nscaTarget < ${homeDir}/nscaTarget.dta
else
   nscaTarget=monitor1.wpprivate.com
fi
#
# Retrieve the name to use as the Nagios host target
# from ${homeDir}/Nagios_hostname.dta, else use the "uname -n" command
/usr/bin/test -s ${homeDir}/Nagios_hostname.dta
if [ $? -eq 0 ]
then
   read nagiosHost < ${homeDir}/Nagios_hostname.dta
else
   nagiosHost=$(/bin/uname -n | $cut -f1 -d".")
fi
#
exitCode=0
tab="	"
nagiosSvc="Uptime"
#
# Check for existence of a StopAllMonitoring file in /var/tmp, if it exists,
# then bypass processing
ls /var/tmp | /bin/grep -i StopAllMonitoring > /dev/null
if [ $? -eq 0 ]
then
   nagiosMsg="StopAllMonitoring file encountered, exiting"
   toNagios
fi
#
# Trigger auto-deployment of Nagios service
serviceSetupFlag=${homeDir}/NagiosServiceSetupTriggered_Uptime
/usr/bin/test -f $serviceSetupFlag
if [ $? -ne 0 ]
then
   /usr/bin/test -s /etc/redhat-release
   if [ $? -eq 0 ]
   then
      /bin/grep CentOS /etc/redhat-release > /dev/null
      if [ $? -ne 0 ]
      then
         /bin/grep "Red Hat" /etc/redhat-release > /dev/null
         if [ $? -ne 0 ]
         then
            nagiosHostType=Unknown
         else
            nagiosHostType=RedHat
         fi
      else
         nagiosHostType=CentOS
      fi
   else
      /bin/uname -a | /bin/grep -i ubuntu > /dev/null
      if [ $? -eq 0 ]
      then
         nagiosHostType=Ubuntu
      else
         nagiosHostType=Unknown
      fi
   fi
   /bin/touch $serviceSetupFlag
   nagiosMsg="Uptime@${nagiosHost}@${nagiosHostType}@APPNAME@Uptime@1@"
   nagiosHost=$nscaTarget
#  The nagiosHost value in the nagiosMsg string must be the local hostname
#  but the nagiosHost value used in the nscaPkt sent to the Nagios
#  "Service Setup Capture" service must be the nscaTarget.dta value, or if that
#  file is absent then monitor1
   nagiosSvc="Service Setup Capture"
   exitCode=1
   toNagios
fi
#
nagiosMsg=$(/usr/bin/uptime)
#
toNagios
