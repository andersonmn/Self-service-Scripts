#!/bin/ksh
displayDocumentation ()
{
/bin/echo "Script nscaMemory information and usage:"
/bin/echo "----------------------------------------"
/bin/echo " 1. captures \"vmstat\" metrics for Linux systems only"
/bin/echo "    and uses the \"free -m\" command to capture swap device usage"
/bin/echo " 2. communicates with Nagios via NSCA"
/bin/echo "    (NSCA daemon and configuration file must be present in the"
/bin/echo "     home directory of the executing user or the script will exit)"
/bin/echo " 3. if the executing user's home directory contains a non-null file"
/bin/echo "    named \"nscaTarget.dta\", the value in that file is used as the"
/bin/echo "    destination for NSCA data, else \"monitor1.wpprivate.com\" is"
/bin/echo "    used (nscaTarget.dta content should be the IP of monitor1 or"
/bin/echo "    another Nagios server)"
/bin/echo " 4. accepts arguments for warning/critical thresholds"
/bin/echo "    - must be specified as a comma-delimited, no-space string"
/bin/echo "    - options must appear exactly as shown, case sensitive"
/bin/echo "    - may appear in any order or combination"
/bin/echo "    - metric-to-threshold compares use the \"-ge\" operator"
/bin/echo "      (except for freeMemKbWarn/Crit thresholds which use the"
/bin/echo "       \"-le\" operator)"
/bin/echo "      Valid threshold parameter options:"
/bin/echo "         ppiWarn    ppiCrit         (pages paged in rate)"
/bin/echo "         ppoWarn    ppoCrit         (pages paged out rate)"
/bin/echo "         psiWarn    psiCrit         (pages swapped in rate)"
/bin/echo "         psoWarn    psoCrit         (pages swapped out rate)"
/bin/echo "         freeMemKbWarn      freeMemKbCrit"
/bin/echo "         swapPcntWarn       swapPcntCrit"
/bin/echo "         noPerfData                 (no Nagios performance data)"
/bin/echo "                                    (i.e., no data to Graphite)"
/bin/echo "      (Note that for freeMemKbWarn and freeMemKbCrit, a non-OK"
/bin/echo "       state is triggered if the freeMemoryKb value is at or"
/bin/echo "       BELOW the specified threshold; for all other metrics the"
/bin/echo "       value must be at or ABOVE the threshold)"
/bin/echo "      Examples:"
/bin/echo "         ppiWarn=100,psoWarn=5"
/bin/echo "         ppiCrit=500,psoCrit=10"
/bin/echo "         ppiCrit=500,noPerfData,psoCrit=10"
/bin/echo "         freeMemKbCrit=512,noPerfData,psoCrit=10"
/bin/echo " 5. accepts \"tries=n\" argument (case insensitive) to be used"
/bin/echo "    as the \"max_check_attempts\" value in the auto-deployed"
/bin/echo "    Nagios service (if not supplied, default is 1)"
/bin/echo "    Explanation - if there are warning and/or critical thresholds"
/bin/echo "    in effect for this monitor, and if the warning/critical action"
/bin/echo "    (email/alert) should occur immediately upon a threshold being"
/bin/echo "    met/exceeded, then don't supply this argument, or supply"
/bin/echo "    \"tries=1\". However, if you want a threshold-met/exceeded"
/bin/echo "    condition to persist for some duration before action is taken,"
/bin/echo "    then use this argument to define the desired duration."
/bin/echo "    The \"duration\" is actually the number of consecutive times"
/bin/echo "    the Nagios service must be set to a WARNING or CRITICAL state"
/bin/echo "    in order to trigger an action. For example, if this script"
/bin/echo "    is run every five minutes and a non-OKAY condition must"
/bin/echo "    persist for ten minutes before notification takes place,"
/bin/echo "    then use \"tries=3\":"
/bin/echo "    a. problem state onset occurs - Nagios check attempts=1"
/bin/echo "    b. 5 minutes later, problem state persists - check attempts=2"
/bin/echo "    c. 5 minutes later, problem state persists - check attempts=3,"
/bin/echo "       action (email/alert) is triggered"
/bin/echo " 6. accepts \"debug\" argument (value \"debug\", case insensitive)"
/bin/echo "    to trace logic performed by the script and disable transmission"
/bin/echo "    of data to Nagios"
/bin/echo " 7. script will exit if a StopAllMonitoring (case insensitive) file"
/bin/echo "    is encountered in /var/tmp"
/bin/echo " 8. the script attempts to find the local hostname first in a file"
/bin/echo "    named Nagios_hostname.dta in the executing user's home"
/bin/echo "    directory, else the \"uname -n\" command is used"
/bin/echo " 9. for hosts/services not manually established in Nagios"
/bin/echo "    configuration, the first execution will trigger auto-deployment"
/bin/echo "    of the needed Nagios object(s) - to re-trigger auto-deployment,"
/bin/echo "    remove the \"NagiosServiceSetupTriggered_Memory\" file"
/bin/echo "    from the executing user's home directory (auto-deployment is"
/bin/echo "    also re-triggered by a change to the \"tries\" parameter)"
/bin/echo "10. if expected execution results are not observed, check the"
/bin/echo "    contents of the \"nscaMemory_lastStatus\" file in the executing"
/bin/echo "    user's home directory"
exit 0
}
#
toNagios ()
{
if [ $debugSw = yes ]
then
   /bin/echo "####################"
   /bin/echo "##### toNagios #####"
   /bin/echo "####################"
   set -x
fi
#
# Format an NSCA-compatible string and send to Nagios via NSCA
nscaPkt="${nagiosHost}${tab}${nagiosSvc}${tab}${exitCode}${tab}${nagiosMsg}"
if [ $debugSw = no ]
then
   /bin/echo "$nscaPkt" | $nscaBinaryPath $nscaTarget -c $nscaConfigPath > /dev/null 2>&1
else
   /bin/echo "$nscaPkt"
fi
#
/bin/echo "$lastStatusMsg" > $lastStatus
exit 0
}
#
perfDataCheck ()
{
if [ "$debugSw" = "yes" ]
then
   /bin/echo "##### perfDataCheck #####"
   set -x
fi
#
# If a threshold argument was supplied, and if that argument contains the
# string "noPerfData", set the perfData switch to No (no perfdata will be sent
# to Nagios and thus no data to Graphite
/bin/echo $argString | /bin/grep noPerfData > /dev/null
if [ $? -eq 0 ]
then
   perfData=No
   argString=$(/bin/echo $argString | /bin/sed 's/noPerfData//g' | /bin/sed 's/,,/,/g')
fi
}
#
/usr/bin/test -f /bin/awk
if [ $? -eq 0 ]
then
   awk=/bin/awk
else
   awk=/usr/bin/awk
fi
/usr/bin/test -f /bin/cut
if [ $? -eq 0 ]
then
   cut=/bin/cut
else
   cut=/usr/bin/cut
fi
#
perfData=Yes
debugSw=no
tries=1
#
#process input arguments, if any
for inputArg in $1 $2 $3 $4
do
   /bin/echo "$inputArg" | /bin/grep -i help > /dev/null
   if [ $? -eq 0 ]
   then
      displayDocumentation
   else
      /bin/echo "$inputArg" | /bin/grep -i debug > /dev/null
      if [ $? -eq 0 ]
      then
         /bin/echo "##### Top of mainline #####"
         debugSw=yes
         set -x
      else
         /bin/echo "$inputArg" | /bin/grep -i "tries=" > /dev/null
         if [ $? -eq 0 ]
         then
            oldIFS="$IFS"
            IFS="="
            set -- $inputArg
            tries=$2
            IFS="$oldIFS"
#           Is the tries value numeric?
            triesHold=$(/bin/echo ${tries} | /bin/sed 's/[0-9]//g')
            if [ "$triesHold" != "" ]
            then
#              The tries value is not numeric, default to 1
               tries=1
            fi
         else
            argString="$inputArg"
            perfDataCheck
            argString=$(/bin/echo ${argString} | /bin/sed 's/,/ /g')
         fi
      fi
   fi
done
#
# Determine path for the send_nsca and send_nsca.cfg modules, if any
owner=$(/usr/bin/whoami)
homeDir=$(/bin/grep ${owner} /etc/passwd | $cut -f6 -d":")
lastStatus=${homeDir}/nscaMemory_lastStatus
lastStatusMsg="processing completed normally"
#
nscaFound=No
for nscaDir in $homeDir /usr/local/bin /usr/local/nagios
do
   /usr/bin/test -s ${nscaDir}/send_nsca
   if [ $? -eq 0 ]
   then
      nscaBinaryPath=${nscaDir}/send_nsca
      /usr/bin/test -s ${nscaDir}/send_nsca.cfg
      if [ $? -eq 0 ]
      then
         nscaFound=Yes
         nscaConfigPath=${nscaDir}/send_nsca.cfg
         break
      fi
   fi
done
if [ $nscaFound = No ]
then
   /bin/echo "communication with Nagios not possible, NSCA binary not present" > $lastStatus
   exit 1
fi
#
/usr/bin/test -s ${homeDir}/nscaTarget.dta
if [ $? -eq 0 ]
then
   read nscaTarget < ${homeDir}/nscaTarget.dta
else
   nscaTarget=monitor1.wpprivate.com
fi
#
# Capture the name to use as the Nagios target host
# from ${homeDir}/Nagios_hostname.dta, else use the "uname -n" command
/usr/bin/test -s ${homeDir}/Nagios_hostname.dta
if [ $? -eq 0 ]
then
   read nagiosHost < ${homeDir}/Nagios_hostname.dta
else
   nagiosHost=$(/bin/uname -n | $cut -f1 -d".")
fi
#
exitCode=0
tab="	"
nagiosSvc="Vmstat Metrics"
#
# Check for existence of a StopAllMonitoring file in /var/tmp, if it exists,
# then bypass processing
ls /var/tmp | /bin/grep -i StopAllMonitoring > /dev/null
if [ $? -eq 0 ]
then
   nagiosMsg="StopAllMonitoring file encountered, exiting"
   lastStatusMsg="$nagiosMsg"
   toNagios
fi
#
processCount=$(/bin/ps -ef | /bin/grep nscaMemory | /bin/grep -v grep | /usr/bin/wc -l | /bin/sed 's/ //g')
if [ $processCount -gt 3 ]
then
   nagiosMsg="prior execution not completed, exiting"
   lastStatusMsg="$nagiosMsg"
   toNagios
fi
#
serviceSetup=No
#
savedTries=/tmp/nscaMemory_savedTries
/usr/bin/test -f $savedTries
if [ $? -eq 0 ]
then
   read savedTriesData < $savedTries
   if [ "$savedTriesData" != "$tries" ]
   then
      serviceSetup=Yes
      /bin/echo "$tries" > $savedTries
   fi
else
   /bin/echo "$tries" > $savedTries
fi
#
serviceSetupFlag=${homeDir}/NagiosServiceSetupTriggered_Memory
/usr/bin/test -f $serviceSetupFlag
if [ $? -ne 0 ]
then
   serviceSetup=Yes
   /bin/touch $serviceSetupFlag
fi
#
if [ $serviceSetup = Yes ]
then
#  Trigger auto-deployment of Nagios service
   /usr/bin/test -s /etc/redhat-release
   if [ $? -eq 0 ]
   then
      /bin/grep CentOS /etc/redhat-release > /dev/null
      if [ $? -ne 0 ]
      then
         /bin/grep "Red Hat" /etc/redhat-release > /dev/null
         if [ $? -ne 0 ]
         then
            nagiosHostType=Unknown
         else
            nagiosHostType=RedHat
         fi
      else
         nagiosHostType=CentOS
      fi
   else
      /bin/uname -a | /bin/grep -i ubuntu > /dev/null
      if [ $? -eq 0 ]
      then
         nagiosHostType=Ubuntu
      else
         nagiosHostType=Unknown
      fi
   fi
   nagiosMsg="Memory@${nagiosHost}@${nagiosHostType}@APPNAME@Vmstat Metrics@${tries}@"
   nagiosHost=$nscaTarget
#  The nagiosHost value in the nagiosMsg string must be the local hostname
#  but the nagiosHost value used in the nscaPkt sent to the Nagios
#  "Service Setup Capture" service must be monitor1
   nagiosSvc="Service Setup Capture"
   exitCode=1
   toNagios
fi
#
# Set initial metric values
flr=0
tpr=0
cs=0
di=0
sc=0
runQ=0
blkQ=0
swapQ=0
vmUsed=0
vmAvail=0
avm=0
fre=0
#
# Set threshold values
ppiCritThresh=X
ppiWarnThresh=X
ppoCritThresh=X
ppoWarnThresh=X
psiCritThresh=X
psiWarnThresh=X
psoCritThresh=X
psoWarnThresh=X
freeMemKbCritThresh=X
freeMemKbWarnThresh=X
swapPcntWarnThresh=X
swapPcntCritThresh=X
#
IFS="
"
if [ "$argString" != "" ]
then
   oldIFS="$IFS"
   IFS=" "
   for argNum in $argString
   do
      argType=$(/bin/echo $argNum | $cut -f1 -d"=")
      case $argType in
         ppiCrit) ppiCritThresh=$(/bin/echo $argNum | $cut -f2 -d"=") ;;
         ppiWarn) ppiWarnThresh=$(/bin/echo $argNum | $cut -f2 -d"=") ;;
         ppoCrit) ppoCritThresh=$(/bin/echo $argNum | $cut -f2 -d"=") ;;
         ppoWarn) ppoWarnThresh=$(/bin/echo $argNum | $cut -f2 -d"=") ;;
         psiCrit) psiCritThresh=$(/bin/echo $argNum | $cut -f2 -d"=") ;;
         psiWarn) psiWarnThresh=$(/bin/echo $argNum | $cut -f2 -d"=") ;;
         psoCrit) psoCritThresh=$(/bin/echo $argNum | $cut -f2 -d"=") ;;
         psoWarn) psoWarnThresh=$(/bin/echo $argNum | $cut -f2 -d"=") ;;
         freeMemKbCrit) freeMemKbCritThresh=$(/bin/echo $argNum | $cut -f2 -d"=") ;;
         freeMemKbWarn) freeMemKbWarnThresh=$(/bin/echo $argNum | $cut -f2 -d"=") ;;
         swapPcntCrit) swapPcntCritThresh=$(/bin/echo $argNum | $cut -f2 -d"=") ;;
         swapPcntWarn) swapPcntWarnThresh=$(/bin/echo $argNum | $cut -f2 -d"=") ;;
      esac
   done
   IFS="$oldIFS"
fi
#
# Format thresholds for display in Nagios message
if [ "$argString" != "" ]
then
   thresholdDisp=$(/bin/echo $argString | /bin/sed 's/ /,/g')
   thresholdDisp=", thresholds: ${thresholdDisp}"
else
   thresholdDisp=""
fi
#
vmstatOut=/tmp/checkVmstat_Out
vmstatOut2=/tmp/checkVmstat_Out2
statFile=$homeDir/checkVmstat_savedStats
sseFile=$homeDir/checkVmstat_savedSSE
statsSaved=No
sseSaved=No
#
# Capture system seconds-since-epoch
currSSE=$(/bin/date '+%s')
#
/usr/bin/vmstat -s > $vmstatOut
/usr/bin/vmstat 1 2 | tail -1 > $vmstatOut2
#
# Capture specific metrics from vmstat output
ppi=$(/bin/cat $vmstatOut | /bin/grep "pages paged in" | $awk '{print $1}')
ppo=$(/bin/cat $vmstatOut | /bin/grep "pages paged out" | $awk '{print $1}')
psi=$(/bin/cat $vmstatOut | /bin/grep "pages swapped in" | $awk '{print $1}')
pso=$(/bin/cat $vmstatOut | /bin/grep "pages swapped out" | $awk '{print $1}')
cs=$(/bin/cat $vmstatOut | /bin/grep "CPU context switches" | $awk '{print $1}')
di=$(/bin/cat $vmstatOut | /bin/grep "interrupts" | $awk '{print $1}')
runQ=$(/bin/cat $vmstatOut2 | $awk '{print $1}')
blkQ=$(/bin/cat $vmstatOut2 | $awk '{print $2}')
vmUsed=$(/bin/cat $vmstatOut2 | $awk '{print $3}')
fre=$(/bin/cat $vmstatOut2 | $awk '{print $4}')
buff=$(/bin/cat $vmstatOut2 | $awk '{print $5}')
cache=$(/bin/cat $vmstatOut2 | $awk '{print $6}')
#
# If stats were saved from a previous check, they will be used to calculate
# per-second rates, else stat will be saved for the first time
/usr/bin/test -s $statFile
if [ $? -eq 0 ]
then
   statsSaved=Yes
fi
/usr/bin/test -s $sseFile
if [ $? -eq 0 ]
then
   sseSaved=Yes
fi
if [ $statsSaved = No -o $sseSaved = No ]
then
   /bin/echo "PPI|$ppi|PPO|$ppo|PSI|$psi|PSO|$pso|CS|$cs|DI|$di|SC|$sc|FLR|$flr|TPR|$tpr|" > $statFile
   /bin/echo $currSSE > $sseFile
   /bin/echo "first execution, metrics saved"
   toNagios
else
#  Capture individduual metrics from the statFile
   read statLine < $statFile
   oldIFS="$IFS"
   IFS="|"
   set -- $statLine
   savedPPI=$2
   savedPPO=$4
   savedPSI=$6
   savedPSO=$8
   savedCS=${10}
   savedDI=${12}
   savedSC=${14}
   savedFLR=${16}
   savedTPR=${18}
   IFS="$oldIFS"
   /bin/echo "PPI|$ppi|PPO|$ppo|PSI|$psi|PSO|$pso|CS|$cs|DI|$di|SC|$sc|FLR|$flr|TPR|$tpr|" > $statFile
   if [ $savedPPI -gt $ppi -o $savedPPO -gt $ppo ]
   then
#     There was a reboot and page counts were reset
      /bin/echo $currSSE > $sseFile
#      /bin/echo "PPI|0|PPO|0|PSI|0|PSO|0|CS|0|DI|0|SC|0|FLR|0|TPR|0|runQ|0|blkQ|0|swapQ|0|vmUsed|0|vmAvail|0|avm|0|fre|0|" > $statFile
   else
      ((ppi = ppi - savedPPI))
      ((ppo = ppo - savedPPO))
      ((psi = psi - savedPSI))
      ((pso = pso - savedPSO))
      ((cs = cs - savedCS))
      ((di = di - savedDI))
      ((sc = sc - savedSC))
      ((flr = flr - savedFLR))
      ((tpr = tpr - savedTPR))
      read savedSSE < $sseFile
      ((sseDiff = currSSE - savedSSE))
      ppiRate=$(/bin/echo $ppi $sseDiff | $awk '{printf "%7.2f",($1/$2)}')
      ppoRate=$(/bin/echo $ppo $sseDiff | $awk '{printf "%7.2f",($1/$2)}')
      psiRate=$(/bin/echo $psi $sseDiff | $awk '{printf "%7.2f",($1/$2)}')
      psoRate=$(/bin/echo $pso $sseDiff | $awk '{printf "%7.2f",($1/$2)}')
      csRate=$(/bin/echo $cs $sseDiff | $awk '{printf "%7.2f",($1/$2)}')
      diRate=$(/bin/echo $di $sseDiff | $awk '{printf "%7.2f",($1/$2)}')
      scRate=$(/bin/echo $sc $sseDiff | $awk '{printf "%7.2f",($1/$2)}')
      flrRate=$(/bin/echo $flr $sseDiff | $awk '{printf "%7.2f",($1/$2)}')
      tprRate=$(/bin/echo $tpr $sseDiff | $awk '{printf "%7.2f",($1/$2)}')
      ppiRate=$(/bin/echo $ppiRate | /bin/sed 's/ //g')
      ppoRate=$(/bin/echo $ppoRate | /bin/sed 's/ //g')
      psiRate=$(/bin/echo $psiRate | /bin/sed 's/ //g')
      psoRate=$(/bin/echo $psoRate | /bin/sed 's/ //g')
      csRate=$(/bin/echo $csRate | /bin/sed 's/ //g')
      diRate=$(/bin/echo $diRate | /bin/sed 's/ //g')
      scRate=$(/bin/echo $scRate | /bin/sed 's/ //g')
      flrRate=$(/bin/echo $flrRate | /bin/sed 's/ //g')
      tprRate=$(/bin/echo $tprRate | /bin/sed 's/ //g')
   fi
fi
#
/bin/rm $vmstatOut
#
warnMetric=""
critMetric=""
#
/usr/bin/test -s /usr/bin/free
if [ $? -eq 0 ]
then
   swapData=$(/usr/bin/free -m | /bin/grep "Swap:")
   if [ "$swapData" = "" ]
   then
      swapDataFound=No
      swapPcnt=0
   else
      oldIFS="$IFS"
      IFS=" "
      set -- $swapData
      swapTotal=$2
      swapUsed=$3
      swapFree=$4
      IFS="$oldIFS"
      if [ $swapTotal -eq 0 ]
      then
         swapDataFound=No
         swapPcnt=0
      else
         swapDataFound=Yes
         swapPcnt=$(/bin/echo ${swapTotal} ${swapUsed} 100 | $awk '{printf "%3.2f",(($2/$1)*$3)}')
      fi
   fi
else
   swapDataFound=No
   swapPcnt=0
fi
#
# Compare metrics to thresholds and set exitCode appropriately
for thresholdType in ppiWarn ppoWarn psiWarn psoWarn freeMemKbWarn swapPcntWarn ppiCrit ppoCrit psiCrit psoCrit freeMemKbCrit swapPcntCrit
do
   case $thresholdType in
      ppiWarn) metric=$ppiRate
               comparisonType=high
               threshold=$ppiWarnThresh
               metricLabel=PagesInPerSec
               statCode=1 ;;
      ppoWarn) metric=$ppoRate
               comparisonType=high
               threshold=$ppoWarnThresh
               metricLabel=PagesOutPerSec
               statCode=1 ;;
      psiWarn) metric=$psiRate
               comparisonType=high
               threshold=$psiWarnThresh
               metricLabel=SwapsInPerSec
               statCode=1 ;;
      psoWarn) metric=$psoRate
               comparisonType=high
               threshold=$psoWarnThresh
               metricLabel=SwapsOutPerSec
               statCode=1 ;;
      freeMemKbWarn) metric=$fre
               comparisonType=low
               threshold=$freeMemKbWarnThresh
               metricLabel=FreeMemoryKb
               statCode=1 ;;
      swapPcntWarn) metric=$swapPcnt
               comparisonType=high
               threshold=$swapPcntWarnThresh
               metricLabel=SwapUsedPcnt
               statCode=1 ;;
      ppiCrit) metric=$ppiRate
               comparisonType=high
               threshold=$ppiCritThresh
               metricLabel=PagesInPerSec
               statCode=2 ;;
      ppoCrit) metric=$ppoRate
               comparisonType=high
               threshold=$ppoCritThresh
               metricLabel=PagesOutPerSec
               statCode=2 ;;
      psiCrit) metric=$psiRate
               comparisonType=high
               threshold=$psiCritThresh
               metricLabel=SwapsInPerSec
               statCode=2 ;;
      psoCrit) metric=$psoRate
               comparisonType=high
               threshold=$psoCritThresh
               metricLabel=SwapsOutPerSec
               statCode=2 ;;
      freeMemKbCrit) metric=$fre
               comparisonType=low
               threshold=$freeMemKbCritThresh
               metricLabel=FreeMemoryKb
               statCode=2 ;;
      swapPcntCrit) metric=$swapPcnt
               comparisonType=high
               threshold=$swapPcntCritThresh
               metricLabel=SwapUsedPcnt
               statCode=2 ;;
   esac
   if [ $threshold != X ]
   then
      if [ $comparisonType = high ]
      then
         if [ $(/bin/echo "${metric}>=${threshold}" | /usr/bin/bc) -gt 0 ]
         then
            thresholdMet=Yes
         else
            thresholdMet=No
         fi
      else
         if [ $(/bin/echo "${metric}<=${threshold}" | /usr/bin/bc) -gt 0 ]
         then
            thresholdMet=Yes
         else
            thresholdMet=No
         fi
      fi
      if [ $thresholdMet = Yes ]
      then
         exitCode=$statCode
         metricClause="${metricLabel}=${metric}"
         case $statCode in 
            1) warnMetric=${metricClause} ;; 
            2) critMetric=${metricClause} ;;
         esac
      fi
   fi
done
#
case $exitCode in
   0) serviceMsg="all OK${thresholdDisp}" ;;
   1) serviceMsg="warning: ${warnMetric}${thresholdDisp}" ;;
   2) if [ "$warnMetric" = "" ]
      then
         serviceMsg="critical: ${critMetric}${thresholdDisp}"
      else
         serviceMsg="warning: ${warnMetric}, critical: ${critMetric}${thresholdDisp}"
      fi ;;
esac
#
if [ $perfData = Yes ]
then
   if [ $swapDataFound = No ]
   then
      perfdata=" | SSE=${currSSE} PagesInPerSec=${ppiRate} PagesOutPerSec=${ppoRate} SwapsInPerSec=${psiRate} SwapsOutPerSec=${psoRate} InterruptsPerSec=${diRate} ContextSwitchesPerSec=${csRate} WaitingProcesses=${runQ} UninterruptableSleepProcesses=${blkQ} UsedVirtualMemoryKb=${vmUsed} FreeMemoryKb=${fre} BufferMemoryKb=${buff} CacheMemoryKb=${cache}"
   else
      perfdata=" | SSE=${currSSE} PagesInPerSec=${ppiRate} PagesOutPerSec=${ppoRate} SwapsInPerSec=${psiRate} SwapsOutPerSec=${psoRate} InterruptsPerSec=${diRate} ContextSwitchesPerSec=${csRate} WaitingProcesses=${runQ} UninterruptableSleepProcesses=${blkQ} UsedVirtualMemoryKb=${vmUsed} FreeMemoryKb=${fre} BufferMemoryKb=${buff} CacheMemoryKb=${cache} SwapUsedPcnt=${swapPcnt} SwapUsedMB=${swapUsed}"
   fi
else
   perfdata=""
fi
#
nagiosMsg="${serviceMsg}${perfdata}"
pagePerfData=$(/bin/echo ${metrics} | /bin/sed 's/,//g')
#
toNagios
